第二章学习：列表和元组
 列表：
  num = [1,2,3,4,5,6,7,8,9] ://这是一个序列

  num[0]: 获取num序列第一个值
  num[-1]: 获取num序列最后一个值
  num[0:3]: 分片 结果为 [1,2,3]
  num[:3]: 结果为：[1,2,3]
  num[:]: 表示复制整个序列 [1,2,3,4,5,6,7,8,9]
  num[0:9:2]: 步长 结果为 [1,3,5,7,9] 步长不能为零
  num[::2]: 步长 结果为 [1,3,5,7,9]
  num[::3]: 结果为： [1,4,7]
  num[::-1]: 结果为: [9,8,7,6,5,4,3,2,1]
  num[::-2]: 结果为: [9,7,5,3,1]
  num[::-3]: 结果为： [9,6,3]
  
  del num[0] : 删除元素
  num[0:3] = [10,11]: 分片赋值 结果：[10, 11, 4, 5, 6, 7, 8, 9]
  num[0:3] = [] 结果： [4,5,6,7,8,9] 可以用来删除元素

  列表方法：
   append() :在列表末尾追加新的对象
   extend() :在列表末尾一次追加一个或多个元素 例如： num.extend([21,22])
   count() : 统计某个元素在列表中出现的次数 例如： num.count(1)
   index() : 用于从列表中找出某个值第一个匹配项的索引位置 例如: num.index(3)
   insert() : 将元素插入到列表中 例如： num.insert(0,100) 在索引为0的位置插入100 ，后面的元素一次后移
   pop(index) : 默认移除该列表最后一个元素，并返回该元素的值, 也可自己指定索引，来移除要移除的值，例如：num.pop(0) 移除第一个元素
   remove() : 移除列表中某个值的第一个匹配元素 例如： num.remove(3) 移除值为3的元素
   reverse() : 将列表元素反向存放 
   sort() : 对列表进行排序 
            sort()方法有2个可选参数：key,reverse
            例如：
               x = ['l','hello','zs']
            1. key 根据len 长度排序。  x.sort(key=len)
            2. reverse 是布尔值， 是否反转排序 x.sort(reverse=True)
 
  
  in : 检查一个值是否在序列中 1 in num 结果为 true , 'hel' in 'hello' 结果 true
  ''.join(list): 可以把由字符组成的序列 转成 字符串,单引号中可以加符号隔开每个字符 例如： ‘-’.join(list)

 元组：
   元组与列表一样，也是一种序列，不同的是不能改变。
   创建元组的方法很简单：如果你用逗号分隔了一些值，那么你就自动创建了元组。
   元组是通过圆括号扩起来的：(1,2,3)
   控元组：()
   一个值的元组必须加逗号：(42,) 如果只有一个值的元组，添加逗号很重要，否则 (42) 和 42 是一样的 例如 3 *（40） = 120
 基本元组操作符：
   元组其实并不复杂，除了创建和访问元组外元素之外，没有其他太多操作。
   x = 1,2,3
   
   x[1] : 2
   x[0:2] : (1,2) 元组分片还是元组
   x[::2] : (1, 3) 步长
   x[::-2] : (3, 1) 步长



  新的函数
    
   1. len() :长度
   2. max() :最大值
   3. min() :最小值
   4. list() : 创建序列 如字符串
   5. tuple() : 把一个列表转换成元组 例如 ：tuple([1,2,3])
   6. cmp(x,y): 比较2个值大小， x<y 为-1 ，x>y 为1， x==y 为0
   7. sorted(seq) : 返回已排序 的包含seq 索引元素的列表

















